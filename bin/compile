#!/usr/bin/env bash

# This script serves as the
# [**Python Buildpack**](https://github.com/heroku/heroku-buildpack-python)
# compiler.
#
# A [buildpack](http://devcenter.heroku.com/articles/buildpacks) is an
# adapter between a Python application and Heroku's runtime.
#
# You can intreract with the Heroku API directly with
# [heroku.py](https://github.com/heroku/heroku.py/).
#
# See also: [Release history](/changelog.html), [Detection](/detect.html).
#
# ## Usage
# Compiling an app into a slug is simple:
#
#     $ bin/compile <build-dir> <cache-dir>


# ## Assumptions
#
# This buildpack makes the following assumptions:
#
# - The desired Python VM is available on the base system.
# - Library dependencies are available on the base system.
# - Django applications should not require any platform-specific configuration.

# <hr />

# ## Context

# Fail fast and fail hard.
set -eo pipefail

# Prepend proper path for virtualenv hackery. This will be deprecated soon.
export PATH=:/usr/local/bin:$PATH

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

# The detected application type (`Python`|`Python/Django`).
NAME=$($BIN_DIR/detect $BUILD_DIR)

# Where to store the pip download cache.
CACHED_DIRS=".heroku"
PIP_DOWNLOAD_CACHE=${PIP_DOWNLOAD_CACHE:-$CACHE_DIR/pip_downloads}

# Static configurations for virtualenv caches.
VIRTUALENV_LOC=".heroku/venv"
LEGACY_TRIGGER="lib/python3.4"
PROFILE_PATH="$BUILD_DIR/.profile.d/python.sh"

# Figure out which Python 3 version is being used
PYTHON_EXE="python3"
PYTHON_VERSION="$($PYTHON_EXE -c 'import platform; print(platform.python_version())')"

# Sanitizing environment variables.
unset GIT_DIR PYTHONHOME PYTHONPATH LD_LIBRARY_PATH LIBRARY_PATH

# We'll need to send these statics to other scripts we `source`.
export PIP_DOWNLOAD_CACHE BUILD_DIR CACHE_DIR BIN_DIR PROFILE_PATH

# Syntax sugar.
source $BIN_DIR/utils

# ## Build Time
#

# Switch to the repo's context.
cd $BUILD_DIR

# Export custom env vars if defined
if [ -f bin/compile_env ]; then
    puts-step "Exporting variables from bin/compile_env"
    set -o allexport
    source bin/compile_env
    set +o allexport
fi

# Run pre_compile hook.
run-hook bin/pre_compile

# If no requirements given, assume `setup.py develop`.
if [ ! -f requirements.txt ]; then
  puts-step "No requirements.txt provided; assuming dist package."
  echo "-e ." > requirements.txt
fi

# ### The Cache
mkdir -p $CACHE_DIR
[ ! "$(ls -A $CACHE_DIR)" ] && export FRESH_APP=1

# Purge "old-style" virtualenvs.
[ -d $CACHE_DIR/$LEGACY_TRIGGER ] && rm -fr $CACHE_DIR/*

# Restore old artifacts from the cache.
for dir in $CACHED_DIRS; do
  cp -R $CACHE_DIR/$dir . &> /dev/null || true
done

set +e
# Create set-aside `.heroku` folder.
mkdir .heroku &> /dev/null
set -e

# Buildpack profile init script
mkdir -p $(dirname $PROFILE_PATH)

# ### Virtualenv Setup
#

# Create the virtualenv. Rebuild if corrupt.
# TODO: Bootstrap a bottled Python VM...

puts-step "Preparing Python interpreter ($PYTHON_VERSION)"

# Create the virtualenv.
puts-step "Creating venv"
set +e
rm -R $VIRTUALENV_LOC
set -e
# https://bugs.launchpad.net/ubuntu/+source/python3.4/+bug/1290847/comments/58
$PYTHON_EXE -m venv --without-pip --copies $VIRTUALENV_LOC | indent
wget https://bootstrap.pypa.io/get-pip.py -O - | $VIRTUALENV_LOC/bin/python

# Pylibmc support.
# See [`bin/steps/pylibmc`](pylibmc.html).
source $BIN_DIR/steps/pylibmc

# Run pre_activate venv hook
run-hook bin/pre_activate

# Run post_activate venv hook
run-hook bin/post_activate

# Activate the Virtualenv.
export PATH=$VIRTUALENV_LOC/bin:$PATH

# Install Mercurial if it appears to be required.
if (grep -Fiq "hg+" requirements.txt) then
  python -m pip install --use-mirrors mercurial | indent
fi

# Get the output as it comes, even in non-interactive mode
export PYTHONUNBUFFERED=1

puts-step "Installing dependencies using pip ($(python -m pip --version | awk '{print $2}'))"
python -u -m pip install -vvv -r requirements.txt --exists-action=w --src=./.heroku/src | indent

# Django collectstatic support.
if [ "$NAME" = "Python/Django" ]; then
  puts-step "Running $BIN_DIR/steps/django"
  source $BIN_DIR/steps/django
fi

puts-step "Relocating venv"
source $BIN_DIR/steps/relocate

# ### Finalize
#

puts-step "Storing new artifacts in cache"
for dir in $CACHED_DIRS; do
  rm -rf $CACHE_DIR/$dir
  cp -R $dir $CACHE_DIR/
done

puts-step "Setting context environment variables"
set-env PATH '$HOME/.heroku/venv/bin:$PATH'
set-default-env PYTHONUNBUFFERED true
set-default-env LIBRARY_PATH /app/.heroku/vendor/lib
set-default-env LD_LIBRARY_PATH /app/.heroku/vendor/lib
set-default-env LANG en_US.UTF-8
set-default-env PYTHONPATH /app/


# ### Fin.

# Run post_compile hook.
run-hook bin/post_compile

$BIN_DIR/steps/publish-libs || true
$BIN_DIR/steps/notify-vulnerabilities || true

puts-step "Finished compiling."

# <a href="http://github.com/heroku/heroku-buildpack-python"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://d3nwyuy0nl342s.cloudfront.net/img/7afbc8b248c68eb468279e8c17986ad46549fb71/687474703a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67" alt="Fork me on GitHub"></a>
